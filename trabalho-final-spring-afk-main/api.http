### Testes da API de Gerenciamento de Eventos Acadêmicos

### 1. DEPARTAMENTOS

### 1.1 Criar Departamento
POST http://localhost:8080/departments
Content-Type: application/json

{
  "nome": "Departamento de Ciência da Computação",
  "sigla": "DCC",
  "responsavel": "Prof. João Silva"
}

###

### 1.2 Criar outro Departamento
POST http://localhost:8080/departments
Content-Type: application/json

{
  "nome": "Departamento de Engenharia",
  "sigla": "DENG",
  "responsavel": "Prof. Maria Santos"
}

###

### 1.3 Listar todos os Departamentos
GET http://localhost:8080/departments
Accept: application/json

###

### 1.4 Buscar Departamento por ID
GET http://localhost:8080/departments/1
Accept: application/json

###

### 2. PALESTRANTES

### 2.1 Criar Palestrante
POST http://localhost:8080/speakers
Content-Type: application/json

{
  "nome": "Dr. Ana Costa",
  "miniCurriculo": "Doutora em Inteligência Artificial com 15 anos de experiência",
  "instituicao": "Universidade Federal de São Paulo"
}

###

### 2.2 Criar outro Palestrante
POST http://localhost:8080/speakers
Content-Type: application/json

{
  "nome": "Prof. Carlos Lima",
  "miniCurriculo": "Especialista em Desenvolvimento Web e Mobile",
  "instituicao": "Instituto de Tecnologia"
}

###

### 2.3 Listar todos os Palestrantes
GET http://localhost:8080/speakers
Accept: application/json

###

### 2.4 Buscar Palestrante por ID
GET http://localhost:8080/speakers/1
Accept: application/json

###

### 3. ALUNOS

### 3.1 Criar Aluno
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Pedro Oliveira",
  "matricula": "2021001",
  "curso": "Ciência da Computação"
}

###

### 3.2 Criar outro Aluno
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Julia Santos",
  "matricula": "2021002",
  "curso": "Engenharia de Software"
}

###

### 3.3 Criar terceiro Aluno
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Rafael Silva",
  "matricula": "2021003",
  "curso": "Sistemas de Informação"
}

###

### 3.4 Listar todos os Alunos
GET http://localhost:8080/students
Accept: application/json

###

### 3.5 Buscar Aluno por ID
GET http://localhost:8080/students/1
Accept: application/json

###

### 4. EVENTOS

### 4.1 Criar Evento
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Palestra: Inteligência Artificial no Futuro",
  "descricao": "Uma palestra sobre as tendências da IA para os próximos anos",
  "data": "2025-07-15T14:00:00",
  "limiteParticipantes": 50,
  "idDepartamento": 1,
  "idsPalestrantes": [1]
}

###

### 4.2 Criar outro Evento
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Workshop: Desenvolvimento Web Moderno",
  "descricao": "Workshop prático sobre tecnologias web atuais",
  "data": "2025-07-20T09:00:00",
  "limiteParticipantes": 30,
  "idDepartamento": 2,
  "idsPalestrantes": [2]
}

###

### 4.3 Criar Evento com múltiplos palestrantes
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Seminário: Tecnologia e Inovação",
  "descricao": "Seminário sobre inovação tecnológica com múltiplos palestrantes",
  "data": "2025-07-25T15:30:00",
  "limiteParticipantes": 100,
  "idDepartamento": 1,
  "idsPalestrantes": [1, 2]
}

###

### 4.4 Criar Evento com data passada (para testes posteriores)
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Evento com Data Passada",
  "descricao": "Evento para testar regra de data passada",
  "data": "2025-01-01T10:00:00",
  "limiteParticipantes": 20,
  "idDepartamento": 1,
  "idsPalestrantes": [1]
}

###

### 4.5 Listar todos os Eventos
GET http://localhost:8080/events
Accept: application/json

###

### 4.6 Buscar Evento por ID
GET http://localhost:8080/events/1
Accept: application/json

###

### 5. INSCRIÇÕES

### 5.1 Inscrever Aluno no Evento
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 5.2 Inscrever outro Aluno no mesmo Evento
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 2
}

###

### 5.3 Inscrever Aluno em outro Evento
POST http://localhost:8080/events/2/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 5.4 Listar Inscrições de um Aluno
GET http://localhost:8080/students/1/registrations
Accept: application/json

###

### 5.5 Tentar inscrever o mesmo aluno no mesmo evento (deve falhar)
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 6. RELATÓRIOS

### 6.1 Gerar Relatório do Departamento
GET http://localhost:8080/departments/1/report
Accept: application/json

###

### 6.2 Gerar Relatório do outro Departamento
GET http://localhost:8080/departments/2/report
Accept: application/json

###

### 7. TESTES DE VALIDAÇÃO E REGRAS DE NEGÓCIO

### 7.1 Tentar criar evento sem palestrante (deve falhar)
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Evento sem palestrante",
  "descricao": "Este evento deve falhar",
  "data": "2025-08-01T10:00:00",
  "limiteParticipantes": 20,
  "idDepartamento": 1,
  "idsPalestrantes": []
}

###

### 7.2 Tentar inscrever em evento inexistente (deve falhar)
POST http://localhost:8080/events/999/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 7.3 Tentar inscrever aluno inexistente (deve falhar)
POST http://localhost:8080/events/1/registrations
Content-Type: application/json

{
  "idAluno": 999
}

###

### 7.4 Tentar inscrever em evento com data passada (deve falhar)
POST http://localhost:8080/events/4/registrations
Content-Type: application/json

{
  "idAluno": 3
}

###

### 7.5 Criar evento com limite baixo para testar lotação
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Evento com Limite Baixo",
  "descricao": "Para testar limite de vagas",
  "data": "2025-08-01T14:00:00",
  "limiteParticipantes": 1,
  "idDepartamento": 1,
  "idsPalestrantes": [1]
}

###

### 7.6 Inscrever primeiro aluno (deve funcionar)
POST http://localhost:8080/events/5/registrations
Content-Type: application/json

{
  "idAluno": 3
}

###

### 7.7 Tentar inscrever segundo aluno no evento lotado (deve falhar)
POST http://localhost:8080/events/5/registrations
Content-Type: application/json

{
  "idAluno": 2
}

###

### 7.8 Criar evento conflitante para testar horário
POST http://localhost:8080/events
Content-Type: application/json

{
  "nome": "Evento Conflitante",
  "descricao": "Para testar conflito de horário",
  "data": "2025-07-15T15:00:00",
  "limiteParticipantes": 50,
  "idDepartamento": 2,
  "idsPalestrantes": [2]
}

###

### 7.9 Tentar inscrever aluno em evento com horário conflitante (deve falhar)
POST http://localhost:8080/events/6/registrations
Content-Type: application/json

{
  "idAluno": 1
}

###

### 8. OPERAÇÕES DE ATUALIZAÇÃO

### 8.1 Atualizar Departamento
PUT http://localhost:8080/departments/1
Content-Type: application/json

{
  "nome": "Departamento de Ciência da Computação - Atualizado",
  "sigla": "DCC",
  "responsavel": "Prof. João Silva Neto"
}

###

### 8.2 Atualizar Palestrante
PUT http://localhost:8080/speakers/1
Content-Type: application/json

{
  "nome": "Dr. Ana Costa Silva",
  "miniCurriculo": "Doutora em Inteligência Artificial com 20 anos de experiência",
  "instituicao": "Universidade Federal de São Paulo"
}

###

### 8.3 Atualizar Aluno
PUT http://localhost:8080/students/1
Content-Type: application/json

{
  "nome": "Pedro Oliveira Santos",
  "matricula": "2021001",
  "curso": "Ciência da Computação"
}

###

### 8.4 Atualizar Evento
PUT http://localhost:8080/events/1
Content-Type: application/json

{
  "nome": "Palestra: Inteligência Artificial no Futuro - Atualizada",
  "descricao": "Uma palestra sobre as tendências da IA para os próximos anos com novos insights",
  "data": "2025-07-15T15:00:00",
  "limiteParticipantes": 60,
  "idDepartamento": 1,
  "idsPalestrantes": [1]
}

###

### 9. CANCELAMENTO DE INSCRIÇÃO

### 9.1 Cancelar uma inscrição (substitua o ID pela inscrição real)
DELETE http://localhost:8080/registrations/1

###

### 9.2 Tentar cancelar inscrição já cancelada (deve falhar)
DELETE http://localhost:8080/registrations/1

###

### 10. VERIFICAR ESTADO APÓS OPERAÇÕES

### 10.1 Verificar evento após cancelamento
GET http://localhost:8080/events/1
Accept: application/json

###

### 10.2 Verificar inscrições do aluno após cancelamento
GET http://localhost:8080/students/1/registrations
Accept: application/json

###

### 11. TESTES DE EXCLUSÃO

### 11.1 Tentar excluir palestrante vinculado a evento (deve falhar)
DELETE http://localhost:8080/speakers/1

###

### 11.2 Excluir um aluno
DELETE http://localhost:8080/students/3

###

### 11.3 Verificar se aluno foi excluído
GET http://localhost:8080/students/3
Accept: application/json

###

### 11.4 Excluir evento (deve remover inscrições automaticamente)
DELETE http://localhost:8080/events/2

###

### 11.5 Verificar se evento foi excluído
GET http://localhost:8080/events/2
Accept: application/json

###

### 11.6 Excluir departamento
DELETE http://localhost:8080/departments/2

###

### 12. TESTES DE VALIDAÇÃO ADICCIONAIS

### 12.1 Tentar criar aluno com matrícula duplicada
POST http://localhost:8080/students
Content-Type: application/json

{
  "nome": "Aluno Duplicado",
  "matricula": "2021001",
  "curso": "Teste"
}

###

### 12.2 Verificar se evento mostra status correto de vagas
GET http://localhost:8080/events/5
Accept: application/json

###

### 12.3 Buscar departamento inexistente (deve falhar)
GET http://localhost:8080/departments/999
Accept: application/json

###

### 12.4 Buscar aluno inexistente (deve falhar)
GET http://localhost:8080/students/999
Accept: application/json

###

### 12.5 Buscar palestrante inexistente (deve falhar)
GET http://localhost:8080/speakers/999
Accept: application/json

###

### 12.6 Buscar evento inexistente (deve falhar)
GET http://localhost:8080/events/999
Accept: application/json

###